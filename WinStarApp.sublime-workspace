{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cas",
				"casual-dining"
			],
			[
				"Din",
				"Dining_Side_Nav_Icon"
			],
			[
				"shops",
				"shopsIcon"
			],
			[
				"acco",
				"accommodationsIcon"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "// Load the sw-tookbox library.\nimportScripts('./sw-toolbox.js');\nimportScripts('./runtime-caching.js');\n\n\n\n// tick this to make the cache invalidate and update\nconst CACHE_VERSION = 2453;\nconst CURRENT_CACHES =\n\t{\n\t\t'app-shell': 'app-shell-cache-v' + CACHE_VERSION,\n\t\t'app-data': 'app-data-cache-v' + CACHE_VERSION,\n\t};\n\n//APP SHELL FILES...\nvar filesToCache = \n[\n\t'/splash.gif',\n\t'/screen.png',\n\t'/splash.png',\n\t'/scripts/firebase.min.js',\n\t'/styles/bootstrap.min.css',\n\t'/styles/icons.css',\n\t'/images/splash.png',\n\t'/images/466.gif',\n\t'/images/backgrounds/front-1536x2048.jpg',\n\t'/images/background.png',\n\t'/scripts/jquery-2.1.3.min.js'\n];\n\nvar cacehableRequestsList = ['screwtopmedia', 'winstarworldcasino', 'googleapis', 'gstatic','twitter','twimg','ytimg','youtube', 'jwpcdn'];\n\n\n//WHILE INSTALLING SERVICE WORKER, CACHE APP SHELL...\nself.addEventListener('install', (event) =>\n{\n\tconsole.log('******* INSTALL', event);\n\n\tevent.waitUntil\n\t(\n\t\tcaches.open(CURRENT_CACHES['app-shell']).then\n\t\t(\n\t\t\tfunction(cache) \n\t\t\t{\n\t\t\t\tconsole.log('[ServiceWorker] Caching app shell...', cache);\n\t\t\t\treturn cache.addAll(filesToCache);\n\t\t\t}\n\t\t)\n\t);\n});\n\n\n\nself.addEventListener('activate', (event) =>\n{\n\tconsole.log('******* ACTIVATE', event);\n\n\t// Delete all caches that aren't named in CURRENT_CACHES.\n\t// While there is only one cache in this example, the same logic will handle the case where\n\t// there are multiple versioned caches.\n\tconst expectedCacheNames = Object.keys(CURRENT_CACHES).map((key) =>\n\t{\n\t\treturn CURRENT_CACHES[key];\n\t});\n\n\tconsole.log('ACTIVATE: EXPECTED CACHE NAMES:', expectedCacheNames);\n\n\tevent.waitUntil\n\t(\n\t\tcaches.keys().then((cacheNames) =>\n\t\t{\n\t\t\treturn Promise.all(\n\t\t\t\tcacheNames.map((cacheName) =>\n\t\t\t\t{\n\t\t\t\t\tif (expectedCacheNames.indexOf(cacheName) === -1)\n\t\t\t\t\t{\n\t\t\t\t\t\t// If this cache name isn't present in the array of \"expected\" cache names, then delete it.\n\t\t\t\t\t\tconsole.log('Deleting out of date cache:', cacheName);\n\n\t\t\t\t\t\treturn caches.delete(cacheName);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t})\n\t);\n});\n\n\n\n\n// This sample illustrates an aggressive approach to caching, in which every valid response is\n// cached and every request is first checked against the cache.\n// This may not be an appropriate approach if your web application makes requests for\n// arbitrary URLs as part of its normal operation (e.g. a RSS client or a news aggregator),\n// as the cache could end up containing large responses that might not end up ever being accessed.\n// Other approaches, like selectively caching based on response headers or only caching\n// responses served from a specific domain, might be more appropriate for those use cases.\nself.addEventListener('fetch', (event) => \n{\n\tif (event.request.method === 'GET')\n\t{ \n\t\t// Parse the URL:\n\t\tvar requestURL = new URL(event.request.url);\t\n\t\tvar filesToCacheName = filesToCache.find((n) => n === requestURL.pathname);\n\t\tvar isAppShellCache = (filesToCacheName !== undefined)\n\t\tvar isRequestCacheable = false;\n\t\t\n\t\t//CHECK IF URL IS FROM A CACHEABLE SOURCE...\n\t\tif (cacehableRequestsList.some(function(v) { return event.request.url.indexOf(v) >= 0; })) \n\t\t{\n\t\t\t// There's at least one\n\t\t\tconsole.log('WILL BE CACHED... ', event.request.url);\n\t\t\tisRequestCacheable = true;\n\t\t}\t  \n\n\t\tif (!isRequestCacheable)\n\t\t{ \n\t\t\tconsole.log('--------- REQUEST URL... ', event.request.url);\n\t\t\tconsole.log('--------- IS CACHEABLE... ', isRequestCacheable);\n\t\t\tconsole.log('-------------------------------------------------');\n\t\t}\t\n\n\t\t//ONLY DEAL WITH APP SHELL CACHE OR IF REQUEST IS FROM A CACHEABLE SOURCE...\n\t\tif(isRequestCacheable || isAppShellCache)\n\t\t{\n\t\t\tvar cacheStore = (isAppShellCache) ? CURRENT_CACHES['app-shell'] : CURRENT_CACHES['app-data'];\n\n\t\t\tevent.respondWith\n\t\t\t(\n\t\t\t\tfromCache(cacheStore, event.request).then((response) =>\n\t\t\t\t{\n\t\t\t\t\t// If there is an entry in the cache for event.request, then response will be defined\n\t\t\t\t\t// and we can just return it.\t\t\t\n\t\t\t\t\tif (response)\n\t\t\t\t\t{\n\t\t\t\t\t\tconsole.log('RESPONSE FOUND FOR %s IN CACHE....', event.request.url);\n\n\t\t\t\t\t\t//NOW PULL REQUEST FROM NETWORK FOR LATEST CONTENT\n\t\t\t\t\t\tfromNetworkThenUpdateCache(cacheStore, event.request).then(sendRefreshMessage);\n\n\t\t\t\t\t\treturn response;\n\t\t\t\t\t}\t\t\n\n\t\t\t\t\t//AT THIS POINT, RESULTS DO NOT EXIST IN CACHE, SO RETRIEVE FROM NETWORK...\n\t\t\t\t\treturn fromNetworkThenUpdateCache(cacheStore, event.request);\t\t\t\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\t\n});\n\n\n\nfunction fromCache(cacheStore, request) \n{\n    return caches.open(cacheStore).then((cache) =>\n\t{\n\t\t//console.log('1. *********** FETCHING FROM CAHCE:', request.url);\n\n\t\treturn cache.match(request);\n\t});\n}\n\nfunction fromNetworkThenUpdateCache(cacheStore, request) \n{\n    return caches.open(cacheStore).then((cache) =>\n\t{\n\t\t//console.log('3. *********** CLIENT REQUEST:', request);\n\t\t\n\t\treturn fetch(request).then((response) =>\n\t\t{\t\t\t\n\t\t\t// Optional: add in extra conditions here, e.g. response.type == 'basic' to only cache\n\t\t\t// responses from the same domain. See https://fetch.spec.whatwg.org/#concept-response-type\n\t\t\tif (response.status < 400)\n\t\t\t{\n\t\t\t\t// We need to call .clone() on the response object to save a copy of it to the cache.\n\t\t\t\t// (https://fetch.spec.whatwg.org/#dom-request-clone)\n\t\t\t\tcache.put(request, response.clone());\n\t\t\t}\t\n\n\t\t\t// Return the original response object, which will be used to fulfill the resource request.\n\t\t\treturn response;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t});\n\t});\n}\n\n//SEND NOTIFICATION THAT REQUEST HAS REFRESHED\n//INCLUDES NEW CONTENT (jsonResults)\n//SO CLIENT CAN COMPARE AND DETERMINE IF CONTENT FROM NETWORK HAS CHANGED\nfunction sendRefreshMessage(response) \n{\n\tif(response)\n\t{\n\t\ttry\n\t\t{\n\t\t\tresponseClone = response.clone();\n\n\t\t\tif(responseClone.type === 'cors')\n\t\t\t{\n\t\t\t\tresponseClone.json().then(jsonResults => \n\t\t\t\t{\n\t\t\t\t\tvar message = \n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'refresh',\n\t\t\t\t\t\turl: responseClone.url,\n\t\t\t\t\t\tcontent: jsonResults\n\t\t\t\t\t};\n\n\t\t\t\t\tconsole.log('SERVICE WORKER SEND responseClone:', responseClone);\n\n\t\t\t\t\tself.clients.matchAll().then((clients) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tclients.forEach(client =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tclient.postMessage(JSON.stringify(message));\n\t\t\t\t\t\t});\n\t\t\t\t\t});\t\t\t\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tcatch(exception)\n\t\t{\n\t\t\tconsole.log('***** EXCEPTION ***** ', exception);\n\t\t}\n\t}\n}",
			"file": "HTML/service-worker.js",
			"file_size": 6403,
			"file_write_time": 131764897287436072,
			"settings":
			{
				"buffer_size": 6188,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "HTML/manifest.json",
			"settings":
			{
				"buffer_size": 1500,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\nfunction MobilePatron()\n{\n    function renderSweepstakes(list)\n    {\n        if (list)\n        {\n            //console.log('render sweepstakes:', list);\n\n            var innerhtml = \"\";\n\n            for (var i = 0; i < list.length; i++)\n            {\n                var onClick = \"mobilePatron.OnSweepstakesClick('\" + list[i].codeField + \"','\" + list[i].textField + \"')\";\n                innerhtml += '<li><a href=\"JavaScript:' + onClick + '\">' + list[i].textField + '</a></li>';\n            }\n\n            $('#sweepstakesentries').html(innerhtml);\n        }\n        else\n        {\n            $('#sweepstakesentries').html(\"<li>You have no current sweepstakes entries.</li>\");\n        }\n    };\n    function renderCompCashBalance(compcashbalance)\n    {\n        if (compcashbalance)\n        {\n            //console.log('render comp cash balance:', compcashbalance);\n            $('#CompCashBalance').html(parseInt(compcashbalance.CompCashBalanceValue)/100);\n        }\n        else\n        {\n            $('#CompCashBalance').html(\"0\");\n        }\n    };\n\n    function doLogout()\n    {\n        var deferred = $.Deferred();\n\n        localStorage.clear();\n\n        deferred.resolve();\n\n        return deferred.promise();\n    }\n\n    function setLoggedInTimestamp()\n    {\n        localStorage.setItem('LoggedInTimestamp', moment().format());\n        initializeLogoutTimer();\n\n    }\n\n    function processCurrentUser(resultsFromServer)\n    {\n        //SAVE CURRENT USER AND TOKEN FROM SERVER\n        localStorage.setItem('CurrentUser', JSON.stringify(resultsFromServer.CurrentUser));\n        localStorage.setItem('Token', resultsFromServer.Token);\n        setLoggedInTimestamp();\n    };\n\n    function initializeLogoutTimer()\n    {\n        if (localStorage.getItem(\"LoggedInTimestamp\"))\n        {\n            //var loggedInTimeStamp = localStorage.getItem(\"LoggedInTimestamp\");\n            //var loggedInMoment = new moment(loggedInTimeStamp);\n            //var difference = moment().diff(loggedInMoment, 'seconds', true);\n            //console.log('loggedInTimeStamp:', loggedInTimeStamp);\n            //console.log('duration in seconds:', difference + '(' + difference/60 + ' minutes)');\n            //console.log('logOut Timer In:', logOutTimerInMilliseconds/1000/60 + ' minutes');\n\n            var checkLoginTimeStampTimer = setTimeout\n            (\n                function ()\n                {\n                    var autoLogoutTimer = setTimeout\n                                            (\n                                                function ()\n                                                {\n                                                    doLogout().then\n                                                    (\n                                                        function ()\n                                                        {\n                                                            window.location.href = \"index.html\";\n                                                        }\n                                                    );\n                                                },\n                                                30000   //30000 MILLISECONDS IS 30 SECONDS\n                                            );\n\n                    alertify.alert\n                    (\n                        \"Select the button below to continue viewing your account information. Otherwise, your account will be automatically logged out after 30 seconds.\",\n                        function onOk()\n                        {\n                            //console.log('ok, you can continue');\n                            clearTimeout(autoLogoutTimer);\n                            clearTimeout(checkLoginTimeStampTimer);\n                            setLoggedInTimestamp();\n                        }\n                    ).setting\n                    ({\n                        'label': 'Continue Session'\n                    });\n                },\n                300000  //300000 MILLISECONDS IS 5 MINUTES\n            );\n        }\n    }\n\n\n    var currentUser = JSON.parse(localStorage.getItem('CurrentUser'));\n    var token = localStorage.getItem('Token');\n\n\n    //DATA\n    this.url = \"https://dev.mobile-patron.solutiaconsulting.com:443/api/\";\n    this.urlVip = \"https://sweltering-inferno-2198.firebaseio.com/sections/mywinstar/vipevents/pages/events\";\n    this.urlHosts = \"https://sweltering-inferno-2198.firebaseio.com/sections/mywinstar/mobilePatronsHostInformation/pages/hosts\";\n    this.urlHomePageDisclaimer = \"https://sweltering-inferno-2198.firebaseio.com/sections/mywinstar/homePage/offers_disclaimer\";\n    this.urlOffersDisclaimer = \"https://sweltering-inferno-2198.firebaseio.com/sections/mywinstar/myOffers/offers_disclaimer\";\n    this.urlAccountInformationDisclaimer = \"https://sweltering-inferno-2198.firebaseio.com/sections/mywinstar/mobilePatronsAccountInformation/offers_disclaimer\";\n    this.TimeoutInterval = undefined;\n\n    this.CurrentUser = (currentUser) ? currentUser : undefined;\n\n    // SHOW PATRON INFORMATION\n    this.ShowPatronInformation = function ()\n    {\n        if (currentUser)\n        {\n            $(\"span#FirstName\").html(currentUser.FirstName);\n            $(\"span#LastName\").html(currentUser.LastName);\n            $(\"span#CurrentCardLevel\").html(currentUser.CurrentCardLevel);\n            $(\"span#CashAvailable\").html(currentUser.CashAvailable);\n\n            var points = (currentUser.CurrentPoints) ? currentUser.CurrentPoints : '';\n            $(\"span#CurrentPoints\").html(points);\n\n            var pointsToNextLevel = (currentUser.PointsToNextLevel) ? currentUser.PointsToNextLevel : '';\n            $(\"span#PointsToNextLevel\").html(pointsToNextLevel);\n\n            var expirationDate = moment(currentUser.PointsToNextLevelByDate, \"YYYYMMDD\");\n\n            $(\"span#ExpirationDate\").html(expirationDate.format(\"MMMM DD, YYYY\"));\n\n            if (currentUser.IsGolfMember) \n            {\n                $('#ActiveGolfMembership').show();\n            } \n            else \n            {\n                $('#ActiveGolfMembership').hide();\n            }\n\n            //SET CARD LEVEL BADGE\n            if (currentUser.CurrentCardLevel.trim() === 'PREMIER')\n            {\n                $('img#imageBadge').attr('src', 'images/Badges/Badge-Premier.png').attr('alt', 'Level: Premier');\n            }\n            else if (currentUser.CurrentCardLevel.trim() === 'ELITE')\n            {\n                $('img#imageBadge').attr('src', 'images/Badges/Badge-Elite.png').attr('alt', 'Level: Elite');\n            }\n            else\n            {\n                $('img#imageBadge').attr('src', 'images/Badges/Badge-Club.png').attr('alt', 'Level: Club');\n            }\n        }\n    };\n\n    this.ShowPatronCasinoHost = function ()\n    {\n        if (currentUser.HostName) \n        {\n            $(\"#VipHostName\").html(\"Your Casino Host is: \" + currentUser.HostName);\n        } \n    };\n\n\n    //SHOW ACCOUNT INFORMATION\n    this.ShowAccountInformation = function ()\n    {\n        $(\"span.FirstName\").html(currentUser.FirstName);\n        $(\"span.LastName\").html(currentUser.LastName);\n        $(\"input#EmailAddress\").val(currentUser.EmailAddress);\n        $(\"span.Address1\").html(currentUser.AddressLine1);\n        $(\"span.Address2\").html(currentUser.AddressLine2);\n        $(\"span.City\").html(currentUser.City);\n        $(\"span.State\").html(currentUser.State);\n        $(\"span.Zip\").html(currentUser.Zip);\n        $(\"span.PhoneNumber\").html(currentUser.PhoneNumber);\n    };\n\n\n    //GET PATRON INFORMATION\n    this.GetCurrentPatronDetail = function ()\n    {\n        var url = this.url + \"patron/detail\";\n\n        if (token)\n        {\n            $.ajax({\n                beforeSend: function (request)\n                {\n                    request.setRequestHeader(\"X-PATRONS-AUTH-TOKEN\", token);\n                },\n                type: \"GET\",\n                url: this.url + \"patron/detail\",\n                contentType: \"application/json; charset=UTF-8\",\n                success: function (resultsFromServer)\n                {\n                    processCurrentUser(resultsFromServer);\n                },\n                error: function (errorFromServer)\n                {\n                }\n            });\n        }\n        else\n        {\n            this.DoLogout();\n            //REDIRECT USER\n            window.location.href = \"index.html\";\n        }\n    };\n\n\n    // SWEEPSTAKES\n    this.GetSweepstakes = function ()\n    {\n        var deferred = $.Deferred();\n\n        //IF SWEEPSTAKES EXIST IN LOCAL STORAGE\n        if (localStorage.getItem(\"SweepStakes\"))\n        {\n            var sweepStakesList = JSON.parse(localStorage.getItem(\"SweepStakes\"));\n            renderSweepstakes(sweepStakesList);\n            deferred.resolve(sweepStakesList);\n        }\n        else\n        {\n            if (token)\n            {\n                $.ajax({\n                    beforeSend: function (request)\n                    {\n                        request.setRequestHeader(\"X-PATRONS-AUTH-TOKEN\", token);\n                    },\n                    type: \"GET\",\n                    url: this.url + \"sweepstakes/list\",\n                    contentType: \"application/json; charset=UTF-8\",\n                    success: function (resultsFromServer)\n                    {\n                        localStorage.setItem('SweepStakes', JSON.stringify(resultsFromServer));\n\n                        renderSweepstakes(resultsFromServer);\n                        deferred.resolve(resultsFromServer);\n                    },\n                    error: function (errorFromServer)\n                    {\n                        $('#sweepstakesentries').html(\"<li>You have no current sweepstakes entries.</li>\");\n\n                        localStorage.setItem('SweepStakes', null);\n\n                        deferred.reject(errorFromServer);\n                    }\n                });\n            }\n            else\n            {\n                this.DoLogout();\n                //REDIRECT USER\n                window.location.href = \"index.html\";\n            }\n        }\n\n        return deferred.promise();\n    };\n\n\n    // SWEEPSTAKES\n    this.GetSweepstakeDrawings = function (sweepStakeCode)\n    {\n        var deferred = $.Deferred();\n\n        if (token)\n        {\n            var data =\n            {\n                \"Offer\": sweepStakeCode\n            }\n\n            $.ajax({\n                beforeSend: function (request)\n                {\n                    request.setRequestHeader(\"X-PATRONS-AUTH-TOKEN\", token);\n                },\n                type: \"POST\",\n                url: this.url + \"sweepstakes-drawings/list/\",\n                data: JSON.stringify(data),\n                contentType: \"application/json; charset=UTF-8\",\n                success: function (resultsFromServer)\n                {\n                    deferred.resolve(resultsFromServer);\n                },\n                error: function (errorFromServer)\n                {\n                    deferred.reject(errorFromServer);\n                }\n            });\n        }\n        else\n        {\n            this.DoLogout();\n            //REDIRECT USER\n            window.location.href = \"index.html\";\n        }\n\n        return deferred.promise();\n    };\n\n\n    // OFFERS\n    this.GetOffers = function ()\n    {\n        var deferred = $.Deferred();\n\n        //IF OFFERS LIST EXIST IN LOCAL STORAGE\n        if (localStorage.getItem(\"OffersList\"))\n        {\n            var offersList = JSON.parse(localStorage.getItem(\"OffersList\"));\n            deferred.resolve(offersList);\n        }\n        else\n        {\n            if (token)\n            {\n                $.ajax({\n                    beforeSend: function (request)\n                    {\n                        request.setRequestHeader(\"X-PATRONS-AUTH-TOKEN\", token);\n                    },\n                    type: \"GET\",\n                    url: this.url + \"offers/list\",\n                    contentType: \"application/json; charset=UTF-8\",\n                    success: function (resultsFromServer)\n                    {\n                        localStorage.setItem('OffersList', JSON.stringify(resultsFromServer));\n\n                        deferred.resolve(resultsFromServer);\n                    },\n                    error: function (errorFromServer)\n                    {\n                        deferred.reject(errorFromServer);\n                    }\n                });\n            }\n            else\n            {\n                this.DoLogout();\n                //REDIRECT USER\n                window.location.href = \"index.html\";\n            }\n        }\n\n        return deferred.promise();\n    };\n\n\n    // POWER REWARDS\n    this.GetPowerRewards = function ()\n    {\n        var deferred = $.Deferred();\n\n        //IF OFFERS LIST EXIST IN LOCAL STORAGE\n        if (localStorage.getItem(\"PowerRewards\"))\n        {\n            var powerRewardsList = JSON.parse(localStorage.getItem(\"PowerRewards\"));\n            deferred.resolve(powerRewardsList);\n        }\n        else\n        {\n            if (token)\n            {\n                $.ajax({\n                    beforeSend: function (request)\n                    {\n                        request.setRequestHeader(\"X-PATRONS-AUTH-TOKEN\", token);\n                    },\n                    type: \"GET\",\n                    url: this.url + \"power-rewards/list\",\n                    contentType: \"application/json; charset=UTF-8\",\n                    success: function (resultsFromServer)\n                    {\n                        localStorage.setItem('PowerRewards', JSON.stringify(resultsFromServer));\n\n                        deferred.resolve(resultsFromServer);\n                    },\n                    error: function (errorFromServer)\n                    {\n                        deferred.reject(errorFromServer);\n                    }\n                });\n            }\n            else\n            {\n                this.DoLogout();\n                //REDIRECT USER\n                window.location.href = \"index.html\";\n            }\n        }\n\n        return deferred.promise();\n    };\n\n    // COMP CASH\n    this.GetCompCashBalance = function ()\n    {\n        var deferred = $.Deferred();\n        var myUrl = this.url + 'comp-cash/comp-cash-balance';\n        \n        //IF OFFERS LIST EXIST IN LOCAL STORAGE\n        if (localStorage.getItem(\"CompCashBalance\"))\n        {\n            var compCashBalance = JSON.parse(localStorage.getItem(\"CompCashBalance\"));\n            renderCompCashBalance(compCashBalance);\n            deferred.resolve(compCashBalance);\n        }\n        else\n        {\n            if (token)\n            {\n                $.ajax({\n                    beforeSend: function (request)\n                    {\n                        request.setRequestHeader(\"X-PATRONS-AUTH-TOKEN\", token);\n                    },\n                    type: \"GET\",\n                    url: this.url + \"comp-cash/comp-cash-balance\",\n                    contentType: \"application/json; charset=UTF-8\",\n                    success: function (resultsFromServer)\n                    {\n                        //writeLogItem(\"token\",myUrl,resultsFromServer);\n                        localStorage.setItem('CompCashBalance', JSON.stringify(resultsFromServer));\n                        renderCompCashBalance(resultsFromServer);\n                        deferred.resolve(resultsFromServer);\n                    },\n                    error: function (errorFromServer)\n                    {\n                        //writeLogItem(\"token\",myUrl,JSON.stringify(errorFromServer));\n                        deferred.reject(errorFromServer);\n                    }\n                });\n            }\n            else\n            {\n                this.DoLogout();\n                //REDIRECT USER\n                \n                                                            //openurl(\"index.html\");\n                                                            window.location.href = \"index.html\";\n                                                            //return false;\n            }\n        }\n\n        return deferred.promise();\n    };\n\n    // VIP EVENTS\n    this.GetVipEvents = function ()\n    {\n        var deferred = $.Deferred();\n\n        var hostsFirebase = new Firebase(this.urlVip);\n\n        hostsFirebase.on('value', function (jsonFromServer)\n        {\n            deferred.resolve(jsonFromServer.val());\n        });\n\n        return deferred.promise();\n    };\n\n\n    // HOSTS\n    this.GetHosts = function ()\n    {\n        var deferred = $.Deferred();\n\n        var hostsFirebase = new Firebase(this.urlHosts);\n\n        hostsFirebase.on('value', function (jsonFromServer)\n        {\n            deferred.resolve(jsonFromServer.val());\n        });\n\n        return deferred.promise();\n    };\n\n\n    // HOME PAGE DISCLAIMER\n    this.GetHomePageDisclaimer = function ()\n    {\n        var deferred = $.Deferred();\n\n        var hostsFirebase = new Firebase(this.urlHomePageDisclaimer);\n\n        hostsFirebase.on('value', function (jsonFromServer)\n        {\n            deferred.resolve(jsonFromServer.val());\n        });\n\n        return deferred.promise();\n    };\n\n\n    // OFFERS DISCLAIMER\n    this.GetOffersDisclaimer = function ()\n    {\n        var deferred = $.Deferred();\n\n        var hostsFirebase = new Firebase(this.urlOffersDisclaimer);\n\n        hostsFirebase.on('value', function (jsonFromServer)\n        {\n            deferred.resolve(jsonFromServer.val());\n        });\n\n        return deferred.promise();\n    };\n\n\n    // ACCOUNT INFORMATION DISCLAIMER\n    this.GetAccountInformationDisclaimer = function ()\n    {\n        var deferred = $.Deferred();\n\n        var hostsFirebase = new Firebase(this.urlAccountInformationDisclaimer);\n\n        hostsFirebase.on('value', function (jsonFromServer)\n        {\n            deferred.resolve(jsonFromServer.val());\n        });\n\n        return deferred.promise();\n    };\n\n\n    //UPDATE EMAIL ADDRESS\n    this.UpdateEmailAddress = function (data)\n    {\n        var deferred = $.Deferred();\n        var that = this;\n\n        if (token)\n        {\n            $.ajax({\n                beforeSend: function (request)\n                {\n                    request.setRequestHeader(\"X-PATRONS-AUTH-TOKEN\", token);\n                },\n                type: \"POST\",\n                url: this.url + 'email-address/save',\n                data: JSON.stringify(data),\n                contentType: \"application/json; charset=UTF-8\",\n                success: function (resultsFromServer)\n                {\n                    processCurrentUser(resultsFromServer);\n\n                    deferred.resolve(resultsFromServer);\n                },\n                error: function (errorFromServer)\n                {\n                    deferred.reject(errorFromServer);\n                }\n            });\n        }\n        else\n        {\n            this.DoLogout();\n            //REDIRECT USER\n            window.location.href = \"index.html\";\n        }\n\n        return deferred.promise();\n    };\n\n\n    // DO REGISTRATION\n    this.DoRegistration = function (registrationData)\n    {\n        var deferred = $.Deferred();\n\n        $.ajax({\n            type: \"POST\",\n            url: this.url + 'account/register',\n            data: JSON.stringify(registrationData),\n            contentType: \"application/json; charset=UTF-8\",\n            success: function (resultsFromServer)\n            {\n                processCurrentUser(resultsFromServer);\n                deferred.resolve(resultsFromServer);\n            },\n            error: function (errorFromServer)\n            {\n                deferred.reject(errorFromServer);\n            }\n        });\n\n        return deferred.promise();\n    };\n\n\n    // DO RESET PASSWORD\n    this.DoDoResetPassword = function (resetPasswordData)\n    {\n        var deferred = $.Deferred();\n\n        $.ajax({\n            type: \"POST\",\n            url: this.url + 'password/save',\n            data: JSON.stringify(resetPasswordData),\n            contentType: \"application/json; charset=UTF-8\",\n            success: function (resultsFromServer)\n            {\n                processCurrentUser(resultsFromServer);\n                deferred.resolve(resultsFromServer);\n            },\n            error: function (errorFromServer)\n            {\n                deferred.reject(errorFromServer);\n            }\n        });\n\n        return deferred.promise();\n    };\n\n\n    // DO LOGIN\n    this.DoLogin = function (loginData)\n    {\n        var deferred = $.Deferred();\n\n        $.ajax({\n            type: \"POST\",\n            url: this.url + 'login/authenticate',\n            data: JSON.stringify(loginData),\n            contentType: \"application/json; charset=UTF-8\",\n            success: function (resultsFromServer)\n            {\n                processCurrentUser(resultsFromServer);\n                deferred.resolve(resultsFromServer);\n            },\n            error: function (errorFromServer)\n            {\n                deferred.reject(errorFromServer);\n            }\n        });\n\n        return deferred.promise();\n    };\n\n\n    //LOGOUT\n    this.DoLogout = function ()\n    {\n        return doLogout();\n    };\n\n\n    //CLICKING A SWEEPSTAKES\n    this.OnSweepstakesClick = function (code, name)\n    {\n        localStorage.setItem('SweepStakesCode', JSON.stringify(code));\n        localStorage.setItem('SweepStakesName', JSON.stringify(name));\n        window.location.href = \"mobilePatronSweepstakesDrawings.html\";\n    };\n\n\n    //RETURN IF CURRENT USER HAS HOST FLAG\n    this.HasHostFlag = function ()\n    {\n        return (currentUser && currentUser.HostFlag !== 'N') ? true : false;\n    };\n\n\n    //SHOW ACTIVITY\n    this.ShowActivity = function ()\n    {\n        $(\"#spinnerContainer\").show();\n    };\n\n\n    //HIDE ACTIVITY\n    this.HideActivity = function ()\n    {\n        $(\"#spinnerContainer\").fadeOut(\"slow\"); // will fade out the white DIV that covers the\n    };\n\n\n    //CHECK IF USER SHOULD BE PROMPTED TO BE LOGGED OUT\n    initializeLogoutTimer();\n}",
			"file": "HTML/scripts/mobilePatron.js",
			"file_size": 22712,
			"file_write_time": 131764867467618519,
			"settings":
			{
				"buffer_size": 22008,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "app.yaml",
			"settings":
			{
				"buffer_size": 1843,
				"line_ending": "Windows"
			}
		},
		{
			"file": "HTML/login.html",
			"settings":
			{
				"buffer_size": 12657,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "gsutil -m cp -L cp.log -z html -a public-read -r HTML gs://winstar-world-casino-app.appspot.com\n\ngsutil -m cp -L cpdown.log -r gs://winstar-world-casino-app.appspot.com Download",
			"settings":
			{
				"buffer_size": 177,
				"line_ending": "Windows",
				"name": "gsutil -m cp -L cp.log -z html -a public-read -r H"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 400.0,
		"last_filter": "package",
		"selected_items":
		[
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Preferences: Browse Packages"
			],
			[
				"",
				"About"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"SFTP",
				"SFTP: Browse With FileZilla"
			],
			[
				"zilla",
				"SublimeZilla: Import FileZilla Server"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"'",
				"SublimeLinter: Don't Make Warnings Passive"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 191.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"git checkout -b service-worker",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/projectstoregit/WinStarApp"
	],
	"file_history":
	[
		"/C/projectstoregit/WinStarApp/HTML/contentscript.js",
		"/C/projectstoregit/WinStarApp/HTML/background.js",
		"/C/projectstoregit/WinStarApp/app.yaml",
		"/C/projectstoregit/WinStarApp/HTML/runtime-caching.js",
		"/C/projectstoregit/WinStarApp/HTML/mobilePatronsOffers.html",
		"/C/projectstoregit/WinStarApp/HTML/mobilePatronsHome.html",
		"/C/projectstoregit/WinStarApp/HTML/scripts/mobilePatron.js",
		"/C/projectstoregit/WinStarApp/HTML/register.html",
		"/C/projectstoregit/WinStarApp/HTML/login.html",
		"/C/projectstoregit/WinStarApp/HTML/scripts/myWinstar.js",
		"/C/projectstoregit/WinStarApp/HTML/sw-precache-config.js",
		"/C/projectstoregit/WinStarApp/HTML/index.html",
		"/C/projectstoregit/WinStarApp/HTML/scripts/selectorCache.js",
		"/C/projectstoregit/WinStarApp/HTML/sw-toolbox.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/soapclient.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/selectorCache.min.js",
		"/C/projectstoregit/WinStarApp/HTML/mobilePatronsHome.new.html",
		"/C/projectstoregit/WinStarApp/HTML/manifest.json",
		"/C/projectstoregit/WinStarApp/HTML/manifest.appcache",
		"/C/projectstoregit/WinStarApp/HTML/styles/examples.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/myWinstar.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/examples.min.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/myWinstar.min.css",
		"/C/projectstoregit/WinStarApp/HTML/resortOffers.html",
		"/C/projectstoregit/WinStarApp/HTML/resetPassword.html",
		"/C/projectstoregit/WinStarApp/HTML/offers.html",
		"/C/projectstoregit/WinStarApp/HTML/mobilePatronSweepstakesDrawings.html",
		"/C/projectstoregit/WinStarApp/HTML/mobilePatronsVIPList.html",
		"/C/projectstoregit/WinStarApp/HTML/mobilePatronsVIPDetail.html",
		"/C/projectstoregit/WinStarApp/HTML/mobilePatronsHostInformation.html",
		"/C/projectstoregit/WinStarApp/HTML/mobilePatronsBookNow.html",
		"/C/projectstoregit/WinStarApp/HTML/mobilePatronsAccountInformation.html",
		"/C/projectstoregit/WinStarApp/php.ini",
		"/C/projectstoregit/screwtopmedia-wordpress/php.ini",
		"/C/projectstoregit/WinStarApp/.gitignore",
		"/C/projectstoregit/WinStarApp/HTML/scripts/sha1.js",
		"/C/projectstoregit/WinStarApp/HTML/benefits.php",
		"/C/projectstoregit/WinStarApp/HTML/benefits.html",
		"/C/projectstoregit/WinStarApp/HTML/inc/functions.php",
		"/C/projectstoregit/WinStarApp/HTML/inc/globals.php",
		"/C/projectstoregit/WinStarApp/HTML/functions.php",
		"/C/projectstoregit/WinStarApp/HTML/globals..php",
		"/C/projectstoregit/WinStarApp/HTML/scripts/firebase.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/firebase.min.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/soapclient.min.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/fastclick.min.js",
		"/C/Users/matt_/Downloads/WebCollectCodeSamples/Subscribe_Multiple_Lists.txt",
		"/C/projectstoregit/temp/welcome_email.min.css",
		"/C/projectstoregit/temp/welcome_email.css",
		"/C/projectstoregit/temp/triggeremail.txt",
		"/C/Users/matt_/Downloads/WebCollectCodeSamples/Parsing_Error_Codes_PHP.txt",
		"/C/Users/matt_/Downloads/WebCollectCodeSamples/Subscribe-Unsubscribe_Single_List.txt",
		"/C/Users/matt_/Downloads/WebCollectCodeSamples/Subscribe-Unsubscribe_Multiple_Lists.txt",
		"/C/projectstoregit/temp/triggeremail.csv",
		"/C/Users/matt_/AppData/Roaming/gcloud/logs/2018.04.05/05.04.15.860000.log",
		"/C/Users/matt_/AppData/Roaming/gcloud/logs/2018.04.05/05.12.29.596000.log",
		"/C/Users/matt_/AppData/Roaming/gcloud/logs/2018.04.05/05.29.54.732000.log",
		"/C/Users/matt_/AppData/Roaming/gcloud/logs/2018.04.05/05.51.40.100000.log",
		"/C/Users/matt_/Desktop/scripts/bootstrap.min.js",
		"/C/Users/matt_/Desktop/scripts/contentJSON.min.js",
		"/C/Users/matt_/Desktop/scripts/jquery-2.1.3.min.js",
		"/C/Users/matt_/Desktop/scripts/slick.min.js",
		"/C/Users/matt_/Desktop/scripts/fastclick.min.js",
		"/C/Users/matt_/Desktop/scripts/selectorCache.min.js",
		"/C/Users/matt_/Desktop/scripts/snap.min.js",
		"/C/Users/matt_/Desktop/scripts/soapclient.min.js",
		"/C/Users/matt_/Desktop/scripts/skeleton.min.css",
		"/C/Users/matt_/Desktop/scripts/alertify.min.css",
		"/C/Users/matt_/Desktop/scripts/bootstrap.min.css",
		"/C/Users/matt_/Desktop/scripts/examples.min.css",
		"/C/Users/matt_/Desktop/scripts/offline-theme-dark.min.css",
		"/C/Users/matt_/Desktop/scripts/index.html",
		"/C/Users/matt_/Desktop/scripts/alertify.min.js",
		"/C/projectstoregit/WinStarApp/cp.log",
		"/C/projectstoregit/WinStarApp/HTML/scripts/alertify.js",
		"/C/projectstoregit/WinStarApp/HTML/styles/alertify.min.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/alertify.css",
		"/C/projectstoregit/WinStarApp/HTML/accountHome.html",
		"/C/projectstoregit/WinStarApp/HTML/hostInformation.html",
		"/C/projectstoregit/WinStarApp/HTML/were-making-improvements.html",
		"/C/projectstoregit/WinStarApp/HTML/vipEvents.html",
		"/C/projectstoregit/WinStarApp/HTML/styles/max-767px.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/max-979px.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/max-1200px.css",
		"/C/projectstoregit/WinStarApp/HTML/scripts/scrollz-carousel-firebase.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/contentJSON.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/loadDetail.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/localData.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/fastclick.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/snap.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/nl2br.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/date.format.js",
		"/C/projectstoregit/WinStarApp/HTML/scripts/slick.js",
		"/C/projectstoregit/WinStarApp/HTML/styles/forms/forms.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/max-480px.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/offline-theme-dark.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/offline-language-english.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/slick-theme.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/slick.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/bootstrap.min.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/normalize.css",
		"/C/projectstoregit/WinStarApp/HTML/styles/skeleton.css",
		"/C/Users/matt_/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/matt_/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/matt_/AppData/Roaming/Sublime Text 3/Installed Packages/JsonTree.sublime-package",
		"/C/Users/matt_/AppData/Roaming/Sublime Text 3/Installed Packages/0_package_control_loader.sublime-package",
		"/C/Users/matt_/AppData/Roaming/Sublime Text 3/Installed Packages/Package Control 2.sublime-package",
		"/C/Users/matt_/AppData/Roaming/Sublime Text 3/Installed Packages/Package Control.sublime-package",
		"/C/projectstoregit/WinStarApp/HTML/head.html",
		"/C/projectstoregit/ScrewtopMediaDevApp/dist/index.html",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/runtime-caching.js",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/app/pages/home/services/home.service.ts",
		"/C/projectstoregit/DfwSportsBeatApp/dist/0.chunk.js",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/environments/environment.ts",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/environments/environment.prod.ts",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/service-worker.js",
		"/C/projectstoregit/ScrewtopMediaDevApp/.gitignore",
		"/C/projectstoregit/ScrewtopMediaDevApp/angular-cli.json",
		"/C/projectstoregit/ScrewtopMediaDevApp/app.yaml",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/index.html",
		"/C/projectstoregit/ScrewtopMediaDevApp/package.json",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/assets/manifest.json",
		"/C/projectstoregit/ScrewtopMediaDevApp/sw-precache-config.js",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/scripts/runtime-caching.js",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/scripts/sw-toolbox.js",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/assets/service-worker.js",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/assets/sw.js",
		"/C/projectstoregit/ScrewtopMediaDevApp/src/assets/scripts/runtime-caching.js"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 255.0,
		"where_history":
		[
			"C:\\projectstoregit\\WinStarApp,-*/.git/*,-*/icons/*,-*/images/*",
			"C:\\projectstoregit\\WinStarApp,-*/.git/*,-*/icons/*,-*/images/*,*.html,*.js,*.css",
			"<open files>",
			"C:\\projectstoregit\\WinStarApp,-*/.git/*,-*/icons/*,-*/images/*,*.html,*.js,*.css",
			"<open files>",
			"C:\\projectstoregit\\WinStarApp,-*/.git/*,-*/icons/*,-*/images/*,*.html,*.js,*.css"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"this.url",
			"version",
			"renderSweepstakes",
			"GetSweepstakes",
			"offersError",
			"sweepstakesError",
			"sweepstakes",
			"errorFromServer",
			"responseJSON",
			"paceOptions",
			"debug",
			"dist",
			"\n  expiration: \"0m\"",
			"dist",
			"winstarapp",
			"service-worker.js",
			"js",
			"json",
			"offline.min.js",
			"solutiaconsulting",
			"this.url",
			"466.GIF",
			"offli",
			"http:",
			"baseHref",
			"cvt",
			"processXML",
			"partners",
			"lead_admin_link",
			"wp-content/",
			"wordpress",
			"static",
			"WelcomeEmail_Send",
			"EmailAddress",
			"http:",
			"subscriber",
			"Subscriber_Key",
			",",
			"submitSuscribe",
			"init",
			"age",
			"'",
			"submit",
			"isValidEmail",
			"emails",
			"640x11",
			"lazyload.js",
			"max-1200px.css",
			"max-979px.css",
			"max-767px.css",
			"max-480px.css",
			"contentJSON.js",
			"loadDetail.js",
			"selectorCache.js",
			"localData.js",
			"fastclick.js",
			"firebase.js",
			"snap.js",
			"date.format.js",
			"nl2br.js",
			"slick.js",
			"Cantarell-Regular",
			"myWinstar.css",
			"examples.css",
			"offline-language-english.css",
			"offline-theme-dark.css",
			"slick-theme.css",
			"slick.css",
			"skeleton.css",
			"normalize.css"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"max-1200px.min.css",
			"max-979px.min.css",
			"max-767px.min.css",
			"max-480px.min.css",
			"contentJSON.min.js",
			"loadDetail.min.js",
			"selectorCache.min.js",
			"localData.min.js",
			"fastclick.min.js",
			"firebase.min.js",
			"snap.min.js",
			"date.format.min.js",
			"nl2br.min.js",
			"slick.min.js",
			"myWinstar.min.css",
			"examples.min.css",
			"offline-language-english.min.css",
			"offline-theme-dark.min.css",
			"slick-theme.min.css",
			"slick.min.css",
			"skeleton.min.css",
			"normalize.min.css"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": false,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "HTML/service-worker.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6188,
						"regions":
						{
						},
						"selection":
						[
							[
								781,
								781
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "HTML/manifest.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1500,
						"regions":
						{
						},
						"selection":
						[
							[
								48,
								48
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 202.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "HTML/scripts/mobilePatron.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22008,
						"regions":
						{
						},
						"selection":
						[
							[
								20109,
								20109
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 11215.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "app.yaml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1843,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 771.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "HTML/login.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12657,
						"regions":
						{
						},
						"selection":
						[
							[
								39,
								39
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 177,
						"regions":
						{
						},
						"selection":
						[
							[
								177,
								177
							]
						],
						"settings":
						{
							"auto_name": "gsutil -m cp -L cp.log -z html -a public-read -r H",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 331.0
	},
	"output.sftp":
	{
		"height": 118.0
	},
	"pinned_build_system": "",
	"project": "WinStarApp.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\projectstoregit\\solarmoneyexperts\\SolarSavingsAmerica\\myWorkSpace.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 298.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
